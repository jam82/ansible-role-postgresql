---
# role: ansible-role-postgresql
# file: molecule/resources/playbooks/prepare.yml

- name: Prepare
  hosts: all
  become: True
  gather_facts: False
  vars:
    epel_enabled: False
    upgrade_enabled: False
  tasks:
    # this is done to save time firing all commands
    - name: Set fact for os-specific bootstrapping
      set_fact:
        bootstrap:
          - { id: 'Alpine', cmd: 'apk add --no-cache bash sudo python3' }
          - { id: 'Arch', cmd: 'pacman -Sy && pacman --noconfirm -S bash sudo python3' }
          - { id: 'Centos', cmd: 'yum -y makecache && yum -y install bash sudo python3' }
          - { id: 'Debian', cmd: 'apt-get -y update && apt-get install -y bash sudo python3 python3-apt' }
          - { id: 'Fedora', cmd: 'dnf makecache && dnf -y install bash sudo python3' }
          - { id: 'Redhat', cmd: 'yum -y makecache && yum -y install bash sudo python3' }
          - { id: 'Suse', cmd: 'zypper -n update && zypper -n install bash sudo python3 python3-xml' }
          - { id: 'Ubuntu', cmd: 'apt-get -y update && apt-get install -y bash sudo python3 python3-apt' }

    # some images do not have /etc/os-release, so ignore_errors
    # get os-release info to bootstrap systems for ansible by installing python
    - name: Check os-release for ID
      shell: grep "ID=" /etc/os-release | grep -v "_ID" || echo -n "ID=Na"
      changed_when: False
      ignore_errors: yes
      register: osrelease_id

    - name: Check os-release for ID_LIKE
      shell: grep "ID_LIKE=" /etc/os-release | grep -v "_ID" || echo -n "ID_LIKE=Na"
      changed_when: False
      ignore_errors: yes
      register: osrelease_id_like

    # create dict osrelease as { id: ubuntu, id_like: debian }
    - name: Set fact osrelease
      set_fact:
        osrelease: "{{ osrelease | default( {} ) | combine( { item[0]: item[1] | title } ) }}"
      ignore_errors: yes
      loop:
        - "{{ osrelease_id.stdout.split('=') | lower | default('ID=Na', True) }}"
        - "{{ osrelease_id_like.stdout.split('=') | lower | default('ID_LIKE=Na', True) }}"

    # bootstrap machine for ansible
    - name: Bootstrap machine for ansible
      raw: "{{ item.cmd }}"
      ignore_errors: yes
      loop: "{{ bootstrap }}"
      when: osrelease.id == item.id and not osrelease.id == 'Na'

    # some images do not have /etc/os-release
    - name: Bootstrap machine for ansible (ignore_errors)
      raw: "{{ item.cmd }}"
      loop: "{{ bootstrap }}"
      ignore_errors: yes
      when: osrelease.id | default('Na', True) == 'Na'

    # gather facts
    - name: Gather facts
      gather_facts:

    - name: Enable EPEL Repository
      block:
        - name: EPEL 7 and earlier
          yum:
            name: 'epel-release'
            state: present
            update_cache: yes
          when: ansible_distribution_major_version <= '7'
        - name: EPEL 8 and later
          dnf:
            name: 'epel-release'
            state: present
            update_cache: yes
          when: ansible_distribution_major_version >= '8'
      when: ansible_distribution == 'CentOS'
        or ansible_distribution == "RedHat"
        and epel_enabled | bool

    - name: Upgrade all packages
      block:
        - name: Upgrade all packages (apk)
          apk:
            available: yes
            update_cache: yes
            upgrade: yes
          when: ansible_pkg_mgr == 'apk'

        - name: Upgrade all packages (apt)
          apt:
            upgrade: dist
            update_cache: yes
            autoremove: yes
          when: ansible_pkg_mgr == 'apt'

        - name: Upgrade all packages (dnf)
          dnf:
            name: '*'
            state: latest
            update_cache: yes
          when: ansible_pkg_mgr == "dnf"

        - name: Upgrade all packages (pacman)
          pacman:
            update_cache: yes
            upgrade: yes
          when: ansible_pkg_mgr == 'pacman'

        - name: Upgrade all packages (yum)
          yum:
            name: '*'
            state: latest
            update_cache: yes
          when: ansible_pkg_mgr == 'yum'

        - name: Upgrade all packages (zypper)
          zypper:
            name: '*'
            state: latest
            update_cache: yes
          when: ansible_pkg_mgr == 'zypper'
      when: upgrade_enabled | bool
